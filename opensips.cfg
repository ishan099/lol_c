#
# $Id$
#
# OpenSIPS residential configuration script
#     by OpenSIPS Solutions <team@opensips-solutions.com>
#
# This script was generated via "make menuconfig", from
#   the "Residential" scenario.
# You can enable / disable more features / functionalities by
#   re-generating the scenario with different options.#
#
# Please refer to the Core CookBook at:
#      http://www.opensips.org/Resources/DocsCookbooks
# for a explanation of possible statements, functions and parameters.
#


####### Global Parameters #########

log_level=3
log_stderror=yes
log_facility=LOG_LOCAL0

children=4

/* uncomment the following line to enable debugging */
#debug_mode=yes

/* uncomment the next line to enable the auto temporary blacklisting of 
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns 
   lookup failures (default disabled) */
#dns_try_ipv6=yes

/* comment the next line to enable the auto discovery of local aliases
   based on revers DNS on IPs */
auto_aliases=no


#listen=udp:127.0.0.1:5060   # CUSTOMIZE ME
listen=udp:172.20.2.22:5060   # CUSTOMIZE ME
listen=udp:172.20.2.22:5080
listen=udp:172.20.2.20:5060
listen=udp:172.20.2.20:5080

####### Modules Section ########

#set module path
mpath="/usr/lib/x86_64-linux-gnu/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### TEXTOPS Module
loadmodule "textops.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)
modparam("rr", "enable_double_rr", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### DB_POSTGRES Module
loadmodule "db_postgres.so"

### DOMAIN Module
loadmodule "domain.so"
modparam("domain", "db_url","postgres://duo:DuoS123@104.236.231.11/opensips23")
modparam("domain", "db_mode", 1)

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)


#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "db_mode",   0)

#### REGISTRAR module
loadmodule "registrar.so"

/* uncomment the next line not to allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 10)

#### ACCounting module
loadmodule "acc.so"
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure the enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)


#### UDP protocol
loadmodule "proto_udp.so"

#### MID_REGISTRAR Module ###
loadmodule "mid_registrar.so"
modparam("mid_registrar", "mode", 0) #/* 0 = mirror / 1 = ct / 2 = AoR */
modparam("mid_registrar", "outgoing_expires", 7200)
modparam("mid_registrar", "insertion_mode", 0) #/* 0 = contact; 1 = path */


### DISPATCHER Module ###

loadmodule "dispatcher.so"
modparam("dispatcher", "db_url", "postgres://duo:DuoS123@104.236.231.11/opensips23")
modparam("dispatcher", "attrs_avp", "$avp(272)")

####### Routing Logic ########

# main request routing logic

route{
xlog ("START ROUTE SECTION \n");
#############################################
## I'm live
if(is_method("OPTIONS"))
	{
xlog ("OPTIONS OK");
	sl_send_reply("200" , "ok");
	exit;
	}
#####

	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if (has_totag()) {

xlog ("HAS TO TAGGGG \n");
		# sequential requests within a dialog should
		# take the path determined by record-routing
		if (loose_route()) {
xlog ("IF LOOSE ROUTE \n");			
			if (is_method("BYE")) {
	
xlog ("IF IS METHOD(BYE) \n");
			# do accunting, even if the transaction fails
				do_accounting("log","failed");
			} else if (is_method("INVITE")) {
xlog ("IF IS METHOD(INVITE) \n");
				# even if in most of the cases is useless, do RR for
				# re-INVITEs alos, as some buggy clients do change route set
				# during the dialog.
				record_route();
			}

			# route it out to whatever destination was set by loose_route()
			# in $du (destination URI).
			route(relay);
		} else {
			
			if ( is_method("ACK") ) {
xlog (" IS METHOD(ACK) \n");
				if ( t_check_trans() ) {
xlog ("IF T_CHECK_TRANS() \n");		
					# non loose-route, but stateful ACK; must be an ACK after 
					# a 487 or e.g. 404 from upstream server
					t_relay();
					exit;
				} else {
xlog ("ELSE T_CHECK_TRANS() \n");
					# ACK without matching transaction ->
					# ignore and discard
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}

	# CANCEL processing
	if (is_method("CANCEL"))
	{
xlog ("IF IS METHOD(CANCEL) \n");
		if (t_check_trans())
			t_relay();
		exit;
	}

	t_check_trans();

	if ( !(is_method("REGISTER")  ) ) {
xlog ("IF NOT IS METHOD(REGISTER) \n");
		if (from_uri==myself)
		{
		} else {
			# if caller is not local, then called number must be local
			if (!uri==myself) {
				send_reply("403","Rely forbidden");
				exit;
			}
		}
	}

	# preloaded route checking
	if (loose_route()) {
xlog ("IF LOOSE ROUTE() \n");
		xlog("L_ERR",
		"Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
		if (!is_method("ACK"))
			sl_send_reply("403","Preload Route denied");
		exit;
	}

	# record routing
	if (!is_method("REGISTER|MESSAGE"))
xlog ("IF NOT IS METHOD(REGISTER|MESSAGE) \n");
		record_route();

	# account only INVITEs
	if (is_method("INVITE")) {
xlog ("IF IS METHOD(INVITE) \n");
		do_accounting("log");
		xlog("X-Gateway is $hdr(X-Gateway)>>>>>>>>>>>>>>>>>>>>LLLLLLLLLLLLLLLLLLLLLLKKKKKKKKKKKKKK\n");

    		if($Ri == "172.20.2.22" && $Rp == "5060")
    		{
		#        xlog("\033[36mCALL CAME FROM 192.168.52 ADDRESS-\033[0m---$fU--$tU--fd---$fd-\n");
         	xlog("\033[36mROUTE CALL TO OUTBOUND CONTEXT-\033[0m---PORT---$Rp-$rp--fU--> $fU--tU--> $tU---tu-- $tu-- fd--> $fd-\n");
		#       route(outbound);
        	route(inbound);
        	exit;
    		}
    		else if($Rp == "5080")
    		{
		xlog("\033[36m**********5080*********5080*****$hdr(X-Gateway)**$hdr(Via)*********\033[0m-\n");

        		if(is_present_hf("X-Gateway"))
        		{
            		#$avp(i:20)=$(hdr(X-Gateway));
            		#$var(gateway) = $(hdr(X-Gateway));
            		#remove_hf("X-Gateway");
			xlog("\033[36m*****************$var(gateway)-\033[0m-\n");
			route(outbound);
        		}
        		else
        		{
			xlog("\033[36m****************vvvvvv****$var(gateway)-\033[0m-\n");
            		route(inbound);
            		exit;
        		}
        	xlog("\033[36m************************$Ri********************************$rp************************************************************************************************************************************************ROUTE CALL TO OUTBOUND CONTEXT-\033[0m---PORT---$Rp---fU--> $fU--tU--> $tU---tu-- $tu-- fd--> $fd-\n");
        	exit;
    		}
    		else
    		{
		xlog("\033[32mROUTE CALL TO INBOUND CONTEXT-\033[0m---$fU--$tU--fd---$fd-\n");
		#   t_reply("404", "Not Found");
		route(inbound);
		exit;
    		}


	}

	if (!uri==myself) {
		append_hf("P-hint: outbound\r\n"); 
		route(relay);
	}

	# requests for my domain
	if (is_method("PUBLISH|SUBSCRIBE"))
	{
xlog ("IF IS METHOD(PUBLISH|SUBSCRIBE) \n");
		sl_send_reply("503", "Service Unavailable");
		exit;
	}

	if (is_method("REGISTER"))
	{
#		if (!save("location"))
#			sl_reply_error();
#
#		exit;
xlog("n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> $ru\n");
	mid_registrar_save("location");
        switch ($retcode) {
        case 1:
            xlog("forwarding REGISTER to main registrar ($$ci=$ci)\n");
#            $ru = "sip:10.0.0.3:5070";
#	$ru = "sip:107.170.84.98:5060";
###########################################
#	   ds_select_dst("1", "3");
	    $ru = "sip:192.168.0.240:5060";
            t_relay();
            break;
        case 2:
            xlog("absorbing REGISTER! ($$ci=$ci)\n");
            break;
        default:
            xlog("failed to save registration! ($$ci=$ci)\n");
        }

        exit;

	}
	if ($rU==NULL) {
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}

	# do lookup with method filtering
	if (!lookup("location","m")) {
xlog ("IF NOT LOOKUP LOCATION \n");

#	if($Ri == "138.197.90.92" && $Rp == "5060")
#  	{
##	 xlog("\033[36mCALL CAME FROM 192.168.52 ADDRESS-\033[0m---$fU--$tU--fd---$fd-\n");
#	 xlog("\033[36mROUTE CALL TO OUTBOUND CONTEXT-\033[0m---PORT---$Rp-$rp--fU--> $fU--tU--> $tU---tu-- $tu-- fd--> $fd-\n");
##       route(outbound);
#	route(inbound);
##        exit;
##	}
#	else if($Rp == "5080")
#	{
#xlog("\033[36m**********5080*********5080*****$hdr(X-Gateway)**$hdr(Via)*********\033[0m-\n");
#		if(is_present_hf("gateway")) 
#		{
#                $avp(i:20)=$(hdr(X-Gateway));
#		$var(gateway) = $(hdr(X-Gateway)); 
#		remove_hf("X-Gateway");
#xlog("\033[36m*****************$var(gateway)-\033[0m-\n");
#		}
#		else
#		{
#xlog("\033[36m****************vvvvvv****$var(gateway)-\033[0m-\n");
#		route(inbound);
#                exit;
#		}
#	xlog("\033[36m************************$Ri********************************$rp************************************************************************************************************************************************ROUTE CALL TO OUTBOUND CONTEXT-\033[0m---PORT---$Rp---fU--> $fU--tU--> $tU---tu-- $tu-- fd--> $fd-\n");
#	exit;
#	}
#	else
#  	{
#xlog("\033[32mROUTE CALL TO INBOUND CONTEXT-\033[0m---$fU--$tU--fd---$fd-\n");
##		t_reply("404", "Not Found");
#	route(inbound);
#		exit;
#	}

		t_newtran();
		t_reply("404", "Not Found");
		exit;
	} 

	# when routing via usrloc, log the missed calls also
	do_accounting("log","missed");
	route(relay);
}


route[relay] {
	# for INVITEs enable some additional helper routes
xlog(">>>>>>>>>>>>>>>>>> RELAY CONTEXT >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n");
	if (is_method("INVITE")) {
		t_on_branch("per_branch_ops");
		t_on_reply("handle_nat");
		t_on_failure("missed_call");
	}

	if (!t_relay()) {
		send_reply("500","Internal Error");
	};
	exit;
}




branch_route[per_branch_ops] {
	xlog("new branch at $ru\n");
}


onreply_route[handle_nat] {
	
	xlog("incoming reply\n");
}


failure_route[missed_call] {
	if (t_was_cancelled()) {
		exit;
	}

	# uncomment the following lines if you want to block client 
	# redirect based on 3xx replies.
	##if (t_check_status("3[0-9][0-9]")) {
	##t_reply("404","Not found");
	##	exit;
	##}

}

route[inbound] {
xlog ("CONTEXT ROUTE INBOUND \n");
$var(f) = "172.17.1.117";
#rest_get("http://dynamicconfigurationgenerator.app.veery.cloud/DVP/API/1.0.0.0/DynamicConfigGenerator/LbRequestController/in/$tU/$fd","$var(resultStr)","$var(aa)","$var(bb)");

#	$var(resultStr)="1,192.168.1.209";
	#$var(resultStr)=",";
$var(resultStr)="1,172.17.1.117";
#$var(resultStr)="1,107.170.84.98";
xlog ("\033[32m >>>>>>>>>>>>>>>>>>>> $Rp ---$Ri-- \n");

xlog ("\033[32m REST GET RESULT \033[0m --- $var(resultStr)--- \n");

	if($var(resultStr)== ",,,")
	{
		xlog("\033[31m-----ROUTE TO DISCONNECT--REST_GET result empty \33[0m--\n");
		exit;
	};

#	$var(destIP)=$(var(resultStr){s.select,1,,})+":5080";
	$var(destIP)=$(var(resultStr){s.select,1,,});
#	$var(port)=$(var(resultStr){s.select,2,,});
#	$var(calCount)=$(var(resultStr){s.select,0,,});

#xlog(" callcount-- $var(calCount)\n");
xlog(" FREESITCH-- $var(destIP)\n");

   remove_hf("X-AUTH-IP");

    append_hf("X-AUTH-IP: $si\r\n");

xlog(" \033[32m ROUTE CALL TO THE RELAY CONTEXT \033[0m\n");
#		$du="sip:"+$var(destIP);
xlog(" ++$fu+++$fU+++$rd+++++++++++++++ $du +++++++++");
 rewriteport("5080");
$rd=$var(destIP);
xlog(" ++>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>$rd>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n");
		route(relay);
exit;
}


route[outbound] 
{ 
xlog ("\033[36mCONTEXT ROUTE OUTBOUND \033[0m \n");
#xlog ("\033[36m>>>>>>>>>>>>$(hdr(X-Gateway))\033[0m \n");
#remove_hf("X-Gateway");
#xlog ("\033[36m>>>>>>>>>>>>$(hdr(X-Gateway))\033[0m \n");
#if (is_present_hf("X-Gateway")) {
#                $avp(i:20)=$(hdr(X-Gateway));
		$var(gateway) = $(hdr(X-Gateway)); 
#		remove_hf("X-Gateway");
# 
#}
xlog("-GATEWAY ADDRESS------$var(gateway)--------$(hdr(X-Gateway))-----$avp(i:20)--\n");
#xlog("-DIAL NUMBER----$fU---\n");
##rest_get("http://dynamicconfigurationgenerator.app.veery.cloud/DVP/API/1.0.0.0/DynamicConfigGenerator/LbRequestController/out/$fU/$fd","$var(resultStr)","$var(aa)","$var(bb)");
# #      rest_get("http://172.20.112.206/DUOSLTV5/ContactV5Services/CSRequestWebApi/api/TrunkLimit?ipUrl=$fd&trunkNumber=$fU&numType=Outgoing","$var(resultStr)","$var(aa)","$var(bb)");
##	$var(resultStr)="2,192.168.1.195";
##       $var(destIP)=$(var(resultStr){s.select,2,,});
#$var(aaa) = '"'+$var(gateway)+'"';
#xlog("-DDDDDDDDDDDDDDD----$var(aaa)----\n");
##$rp = '5060';
$rd = $var(gateway);
$rp = "5060";
#
##rewritehost('45.55.205.92');
##$rd=$var(gateway);
##$ru="45.55.205.92";
xlog(" ++>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>$rd>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n");
                route(relay);
exit;
}
